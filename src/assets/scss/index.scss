@use "./font.scss";
@use "./icons.scss";

/* Setting default styles - starts */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

html {
  scroll-behavior: smooth;
}

html,
body,
#root {
  width: 100%;
  height: 100%;
  font-family: var(--font-regular);
  min-height: 100vh;
  background-color: var(--t-home-background-color);
}

body {
  &:has(.cls-searchFlightList) {
    header {
      position: unset;
    }

    .cls-alertComponent {
      display: none;
    }
  }
  &:has(.cls-issueTicket) {
    header {
      position: unset;
    }

    .cls-alertComponent {
      display: none;
    }
  }
}
/* Setting default styles - ends */

/* Scrollbar styling - starts */
::-webkit-scrollbar {
  width: 6px;
  height: 6px;
}

::-webkit-scrollbar-track {
  transition: background-color 0.5s ease;
}

::-webkit-scrollbar-thumb {
  -webkit-border-radius: 10px;
  border-radius: 10px;
  transition: background-color 0.5s ease;
}

.hide-scrollbar {
  &::-webkit-scrollbar-track,
  &::-webkit-scrollbar-thumb {
    background-color: transparent;
  }
}

.show-scrollbar {
  &::-webkit-scrollbar-track {
    background-color: var(--t-grey-light);
    border: 1px solid var(--t-scroll-border-color);
  }

  &::-webkit-scrollbar-thumb {
    background: var(--t-primary);
    border: 1px solid var(--t-scroll-border-color);
  }
}
/* Scrollbar styling - ends */

/****** Shortcut CSS classnames - starts ******/

/* Font families - starts */
.f-reg {
  font-family: var(--font-regular);
}

.f-med {
  font-family: var(--font-medium);
}

.f-sbold {
  font-family: var(--font-semibold);
}

.f-bold {
  font-family: var(--font-bold);
}
/* Font families - ends */

/* Font styling -starts */
.f-italic {
  font-style: italic;
}

.underline {
  text-decoration: underline;
}

.bold {
  font-weight: bold;
}

.sbold {
  font-weight: 600;
}

.capitalize {
  text-transform: capitalize;
}
/* Font styling - ends */

/* Display properties - starts */
.d-block {
  display: block;
}

.d-iblock {
  display: inline-block;
}

.d-iflex {
  display: inline-flex;
}

.d-flex {
  display: flex;
}

.hide {
  display: none;
}
/* Display properties - ends */

/* Alignment and wrapping properties - starts */
.flex-col {
  flex-direction: column;
}

.flex-row {
  flex-direction: row;
}

.flex-wrap {
  flex-wrap: wrap;
}

.flex-no-wrap {
  flex-wrap: nowrap;
}

.text-no-wrap {
  text-wrap: nowrap;
}

.space-between {
  justify-content: space-between;
}

.justify-center {
  justify-content: center;
}

.justify-end {
  justify-content: flex-end;
}

.justify-start {
  justify-content: flex-start;
}

.align-center {
  align-items: center;
}

.align-end {
  align-items: flex-end;
}

.v-align-middle {
  vertical-align: middle;
}

.a-self-center {
  align-self: center;
}

.text-center {
  text-align: center;
}

.text-right {
  text-align: right;
}

.text-left {
  text-align: left;
}

.text-ellipsis {
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}
/* Alignment and wrapping properties - ends */

/* Text color properties - starts */
.text-grey {
  color: var(--light-text);
}

.text-primary {
  color: var(--t-primary);
}

.p-clr {
  color: var(--t-primary);
}

.s-clr {
  color: var(--t-primary);
}

.s-clr-bg {
  color: var(--t-primary-bg);
}

.text-black {
  color: var(--black);
}

.error-clr {
  color: var(--t-error);
}

.text-dark {
  color: var(--t-text-dark);
}

.text-dark-bg {
  color: var(--t-text-dark-bg);
}

.text-light {
  color: var(--t-text-light);
}

.text-lighter {
  color: var(--t-text-lighter);
}

.link-clr {
  color: var(--t-link);
}

.success-clr {
  color: var(--t-success);
}

.low-seat-clr {
  color: var(--t-seat-available-low);
}

.amount-clr {
  color: var(--t-amount);
}

.text-white {
  color: var(--white);
}

.text-black {
  color: var(--black);
}

.blue-text {
  color: var(--t-primary-bg);
}

.bg-white {
  background-color: var(--white-bg);
}

.clr-inherit {
  color: inherit;
}
/* Text color properties - ends */

.pointer {
  cursor: pointer;
}

/* Position properties - starts */
.relative {
  position: relative;
}

.absolute {
  position: absolute;
}

.sticky {
  position: sticky;
}
/* Position properties - ends */

/* Margin properties - starts */
.ml-auto {
  margin-inline-start: auto;
}

.mr-auto {
  margin-inline-end: auto;
}

.mt-auto {
  margin-block-start: auto;
}

.mb-auto {
  margin-block-end: auto;
}

.mv-center {
  margin: auto 0;
}

.mh-center {
  margin: 0 auto;
}
/* Margin properties - ends */

/* Width properties - starts */
.w-max {
  width: max-content;
}

.w-min {
  width: min-content;
}

.min-w-100 {
  min-width: 100%;
}

.max-w-100 {
  max-width: 100%;
}
/* Width properties - ends */

.br-50p {
  border-radius: 50%;
}

.visible-hide {
  visibility: hidden;
}

.disabled {
  opacity: 0.5;
  pointer-events: none;
  cursor: not-allowed;
}

.blur {
  opacity: 0.5;
}

/* Use this class for span tag heading inside the table for responsive design only */
.res-only {
  display: none;
  width: 50%;
}

// Generalized function for generating dynamic property classes
@mixin generate-dynamic-classes(
  $class-prefix,
  $property,
  $base-value,
  $max-value,
  $important: false
) {
  @for $count from 0 through $max-value {
    .#{$class-prefix}-#{$count} {
      #{$property}: $count * $base-value #{if($important, "!important", "")};
    }
  }
}

// Generalized function for generating negative dynamic property classes
@mixin generate-negative-dynamic-classes(
  $class-prefix,
  $property,
  $base-value,
  $max-value,
  $important: false
) {
  @for $count from 0 through $max-value {
    .#{$class-prefix}-#{$count} {
      #{$property}: -$count * $base-value #{if($important, "!important", "")};
    }
  }
}

// SCSS function calls to generate dynamic font-size classes (1px to 60px)
@include generate-dynamic-classes("fs", "font-size", 1px, 60, true);

// SCSS function calls to generate dynamic padding and margin classes (0px to 200px)
@include generate-dynamic-classes(
  "pl",
  "padding-inline-start",
  1px,
  200,
  false
);
@include generate-dynamic-classes("pr", "padding-inline-end", 1px, 200, false);
@include generate-dynamic-classes("pt", "padding-block-start", 1px, 200, false);
@include generate-dynamic-classes("pb", "padding-block-end", 1px, 200, false);
@include generate-dynamic-classes("px", "padding-inline", 1px, 200, false);
@include generate-dynamic-classes("py", "padding-block", 1px, 200, false);
@include generate-dynamic-classes("p", "padding", 1px, 200, false);
@include generate-dynamic-classes("ml", "margin-inline-start", 1px, 200, false);
@include generate-dynamic-classes("mr", "margin-inline-end", 1px, 200, false);
@include generate-dynamic-classes("mt", "margin-block-start", 1px, 200, false);
@include generate-dynamic-classes("mb", "margin-block-end", 1px, 200, false);
@include generate-dynamic-classes("mx", "margin-inline", 1px, 200, false);
@include generate-dynamic-classes("my", "margin-block", 1px, 200, false);
@include generate-dynamic-classes("m", "margin", 1px, 200, false);

// SCSS function calls to generate dynamic width classes (1% to 200%)
@include generate-dynamic-classes("w", "width", 1%, 200, true);

// SCSS function calls to generate dynamic height classes (1px to 500px)
@include generate-dynamic-classes("h", "height", 1px, 500, true);

// SCSS function calls to generate dynamic height classes (1px to 60px)
@include generate-dynamic-classes("lh", "line-height", 1px, 60, true);

// SCSS function calls to generate dynamic position classes (0px to 200px)
@include generate-dynamic-classes("t", "inset-block-start", 1px, 200, false);
@include generate-dynamic-classes("b", "inset-block-end", 1px, 200, false);
@include generate-dynamic-classes("l", "inset-inline-start", 1px, 200, false);
@include generate-dynamic-classes("r", "inset-inline-end", 1px, 200, false);

// SCSS function calls to generate dynamic position classes (-1px to -200px)
@include generate-negative-dynamic-classes(
  "tm",
  "inset-block-start",
  1px,
  200,
  false
);
@include generate-negative-dynamic-classes(
  "bm",
  "inset-block-end",
  1px,
  200,
  false
);
@include generate-negative-dynamic-classes(
  "lm",
  "inset-inline-start",
  1px,
  200,
  false
);
@include generate-negative-dynamic-classes(
  "rm",
  "inset-inline-end",
  1px,
  200,
  false
);

// SCSS function calls to generate dynamic gap classes (1px to 100px)
@include generate-dynamic-classes("g", "gap", 1px, 100, false);
@include generate-dynamic-classes("rg", "row-gap", 1px, 100, false);
@include generate-dynamic-classes("cg", "column-gap", 1px, 100, false);

// SCSS function calls to generate dynamic border-radius classes (1px to 50px)
@include generate-dynamic-classes("br", "border-radius", 1px, 50, false);

/****** Shortcut CSS classnames - starts ******/

//static label (placeholder)
.floating-label {
  position: absolute;
  top: 50%;
  inset-inline-start: 12px;
  transform: translateY(-50%);
  color: var(--t-text-lighter);
  pointer-events: none;
  transition: all 0.3s ease;
  background: transparent;
  padding: 0 5px;
}

//before focus on floating-input
.floating-input {
  width: 100%;
  padding: 10px 12px;
  border-radius: 4px;
  transition: border-color 0.3s ease;
  font: 14px / 21px var(--font-regular);
  // color: var(--black);

  &::placeholder {
    font: 12px / 18px var(--font-regular) !important;
    font-family: var(--font-regular) !important;
  }

  //after focus on floating-input
  &:focus {
    border: 1px solid var(--t-primary) !important;
    outline: none;
    box-shadow: 0px 0px 0px 1px var(--t-primary);
  }

  //after focus change the position of label
  //incase hierarchy distrubed by any element add there class too eg:cls-eye-icon
  &:focus + .cls-eye-icon + .floating-label,
  &:focus + .floating-label,
  &:not(:placeholder-shown) + .cls-eye-icon + .floating-label,
  &:not(:placeholder-shown) + .floating-label {
    top: 0px;
    inset-inline-start: 8px;
    color: var(--t-primary);
    background: linear-gradient(
      to bottom,
      var(--t-floating-label-bg-1) 57%,
      var(--t-floating-label-bg-2) 47%
    );
    border-radius: 3px;
    font: 12px / 21px var(--font-regular);
  }
}

//for error floating input
.ant-input-status-error {
  &:focus {
    border: 1px solid var(--t-error) !important;
  }

  &:focus + .cls-eye-icon + .floating-label,
  &:focus + .floating-label,
  &:not(:placeholder-shown) + .cls-eye-icon + .floating-label,
  &:not(:placeholder-shown) + .floating-label {
    color: var(--t-error);
    background: var(--t-container-bg-color);
  }
}

//for the password input show eye's
.cls-eye-icon {
  position: absolute;
  inset-inline-end: 10px;
  top: 10px;
  margin: 0;

  .cls-open-eye,
  .cls-closed-eye {
    font-size: 20px;
    text-align: center;
    margin: 0;
    cursor: pointer;
    color: #a0a1a7;
  }

  .cls-closed-eye {
    top: 3px;
    position: absolute;
    inset-inline-start: -22px;
    font-size: 16px;
  }
}

.cls-selectFloatingInput {
  position: relative;

  .floating-label {
    position: absolute;
    top: 50%;
    inset-inline-start: 8px;
    color: var(--t-placeholder-color);
    transform: translateY(-50%);
    transition: 0.3s all ease;
    background: transparent;
    font-size: 14px;
    padding: 0 4px;
    border-radius: 3px;
    z-index: 2;
  }

  .cls-floatingSelect {
    width: 190px;

    // Define the floating label styles once
    &.ant-select-focused ~ .floating-label,
    &.ant-select-open ~ .floating-label,
    &:has(.ant-select-selection-item) ~ .floating-label {
      top: 0;
      inset-inline-start: 8px;
      color: var(--t-primary);
      background: linear-gradient(
        to bottom,
        var(--t-floating-label-bg-1) 57%,
        var(--t-floating-label-bg-2) 47%
      );
      font: 12px / 21px var(--font-regular);
    }

    .cls-floatingSelect {
      width: 190px;

      .ant-select-selection-item {
        display: flex;
        gap: 5px;
      }

      // Define the floating label styles once
      &.ant-select-focused ~ .floating-label,
      &.ant-select-open ~ .floating-label,
      &:has(.ant-select-selection-item) ~ .floating-label {
        top: 0;
        inset-inline-start: 8px;
        color: var(--t-primary);
        background: linear-gradient(
          to bottom,
          var(--t-floating-label-bg-1) 57%,
          var(--t-floating-label-bg-2) 47%
        );
        font: 12px / 21px var(--font-regular);
      }
    }

    &.cls-title,
    &.cls-phoneCode {
      width: 90px;
    }

    &.cls-userType {
      width: 245px;
    }
  }
}

.ant-space-compact {
  .ant-select-compact-item {
    width: 90px;
    height: auto;
    .ant-select-selector {
      padding: 0px 10px;
    }
  }

  .floating-label {
    inset-inline-start: 80px;
    z-index: 2;
  }
  .floating-input {
    &:focus + .floating-label,
    &:not(:placeholder-shown) + .floating-label {
      inset-inline-start: 80px;
    }
  }
}

// For radio icon and label background
.ant-radio-group {
  .ant-radio-wrapper {
    &:hover {
      .ant-radio-inner {
        border-color: var(--t-primary);
      }
    }
  }
}

.cls-actionLink {
  color: var(--t-primary);
  border-bottom: 1px dashed var(--t-primary);
}

.cls-secondary-bordered-btn.ant-btn.ant-btn-default.ant-btn-color-default.ant-btn-variant-outlined {
  background-color: transparent;
  border: 1px solid var(--t-secondary);
  color: var(--t-secondary);

  &:hover,
  &:active,
  &:visited {
    background-color: transparent;
    border: 1px solid var(--t-secondary);
    color: var(--t-secondary);
  }
}

.cls-secondaryBtn {
  background-color: transparent;
  border: 1px solid var(--t-primary);
}

.ant-form-item-control {
  .ant-form-item-control-input {
    .ant-form-item-control-input-content {
      .ant-select {
        .ant-select-selector {
          /* Commenting this because, select field is not highlighted with red border 'onBlur' */
          // border: 1px solid var(--t-dropdown-border);
          // background: var(--t-dropdown-bg);
        }
        .ant-select-arrow {
          span {
            color: var(--t-dropdown-arrow);
          }
        }
        &.ant-select-focused {
          .ant-select-selector {
            box-shadow: none;
          }
        }
      }
      .ant-input-affix-wrapper-focused {
        box-shadow: none;
      }
    }
  }
}

.ant-notification {
  .ant-notification-notice {
    background-color: var(--white-bg);
    border-radius: 6px;
    .ant-notification-notice-with-icon {
      .ant-notification-notice-message {
        color: var(--t-text-dark);
        margin-block-end: 2px;
      }
    }
  }
}

/* For eror text message shown for the fields inside confirm modal */
.cls-confirmModal {
  .ant-form-item-explain-error {
    font-size: 11px;
    margin: 10px 0px;
  }
}

button {
  cursor: pointer;
  background: initial;
  border-radius: 3px !important;
}

// standard rounded corner
.rounded {
  border-radius: 4px;
}

// primary text (black for white light theme)
.ant-tabs,
.ant-breadcrumb-separator,
.ant-breadcrumb > span:last-child,
.ant-breadcrumb > span,
.ant-breadcrumb > span a {
  color: var(--primary-text);
}

// to remove existing ant radio button styles
.custom-radio,
.view-switch {
  .ant-radio-button-wrapper {
    &::before {
      display: none;
    }

    border: 0;
    height: auto;
    box-shadow: none !important;
  }
}

.custom-radio .ant-radio-button-wrapper {
  padding: 0;
}

// Custom tooltip with menu
.CustomTooltipMenu {
  .ant-tooltip-inner {
    padding: 0;
  }

  ul {
    margin-bottom: 0;
  }

  a,
  button {
    display: block;
    width: 100%;
    color: inherit;
    text-align: left;
    padding: 0.25rem 0.5rem;

    &:hover {
      color: var(--hover-color);
      background: var(--hover-bg);
    }
  }
}

// ant tab colors override
.ant-tabs-tab.ant-tabs-tab-active {
  .ant-tabs-tab-btn {
    color: var(--primary-text);
    text-shadow: none;
  }
}

.ant-tabs-bottom > .ant-tabs-nav:before,
.ant-tabs-bottom > div > .ant-tabs-nav:before,
.ant-tabs-top > .ant-tabs-nav:before,
.ant-tabs-top > div > .ant-tabs-nav:before,
.border-bottom {
  border-bottom: 1px solid var(--t-text-grey-light);
}

// for status bg and color
.status-Active,
.status-Inactive {
  display: flex;
  align-items: center;

  &::before {
    content: "";
    border-radius: 50%;
    display: inline-block;
    width: 6px;
    height: 6px;
    margin-right: 7px;
  }
}

.status-Active {
  color: #37c57a;

  &::before {
    background: #37c57a;
    box-shadow: #37c57a4f 0px 0px 0px 3px;
  }
}

.status-Inactive {
  color: #fd4646;

  &::before {
    background: #fd4646;
    box-shadow: #fd464659 0px 0px 0px 3px;
  }
}

.reset-btn {
  border: 1px solid var(--ant-primary-color);
  color: var(--ant-primary-color);
}

.no-events {
  pointer-events: none;
}

.no-selection {
  user-select: none;
}

// ant custom pagination
.ant-pagination-item,
.ant-pagination-next .ant-pagination-item-link,
.ant-pagination-prev .ant-pagination-item-link {
  background: none;
  border: 0;
}

.ant-pagination-item a {
  color: var(--dark-grey);
}

.ant-pagination-item-active {
  background: var(--hover-bg);
  border-radius: 50%;

  a {
    color: var(--text-white);
  }
}

.ant-pagination-prev .anticon-left,
.ant-pagination-next .anticon-right {
  svg {
    display: none;
  }

  height: 0;
  width: 0;
  border-top: 7px solid transparent;
  border-bottom: 7px solid transparent;
  vertical-align: middle;
}

.ant-pagination-prev .anticon-left {
  border-right: 9px solid;
}

.ant-pagination-next .anticon-right {
  border-left: 9px solid;
}

.custom-modal {
  .ant-modal-content {
    position: relative;
    border-radius: 0 0 10px 10px;

    &::before,
    &::after {
      content: "";
      position: absolute;
      width: 50%;
      height: 4px;
    }

    &::before {
      background: var(--title-color);
      left: 0;
    }

    &::after {
      top: 0;
      right: 0;
      background: var(--ant-primary-color);
    }
  }
}

/* General classes */
.m-0 {
  margin: 0;
}

.p-0 {
  padding: 0;
}

.disabled,
:disabled {
  opacity: 0.3;
  cursor: not-allowed;
  // pointer-events: none;
}

.cls-grayscale {
  filter: grayscale(100%);
}

.cls-primary-color {
  color: var(--t-primary) !important;
}

/* BG layout text color */
.cls-bgLayout-text-color {
  color: var(--t-text-grey-dark-bg);
}

.cls-btn-styles {
  // height: fit-content;
  border-radius: 4px;
  cursor: pointer;
}

.cls-primary-btn {
  @extend .cls-btn-styles;
  color: var(--t-text-white) !important;
  background: var(
    --t-btn-primary-background-color,
    linear-gradient(90deg, #f8b133 -35.02%, #d22635 108.51%)
  ) !important;
  border: unset !important;
  transition: all 0.3s ease-in;

  &:hover,
  &:active,
  &:visited {
    color: var(--t-text-white) !important;
    background: var(
      --t-btn-primary-background-color,
      linear-gradient(90deg, #f8b133 -35.02%, #d22635 108.51%)
    ) !important;
  }
}

.cls-primary-btn-inverted {
  @extend .cls-btn-styles;
  color: var(--t-text-white) !important;
  background: var(
    --t-btn-primary-inverted-background-color,
    linear-gradient(90deg, #f8b133 -35.02%, #d22635 108.51%)
  ) !important;
  border: unset !important;
  transition: all 0.3s ease-in;

  &:hover,
  &:active,
  &:visited {
    color: var(--t-text-white) !important;
    background: var(
      --t-btn-primary-inverted-background-color,
      linear-gradient(90deg, #f8b133 -35.02%, #d22635 108.51%)
    ) !important;
  }
}

.cls-secondary-btn {
  @extend .cls-btn-styles;
  color: var(--t-primary) !important;
  background: var(--t-transparent, transparent) !important;
  border: 1px solid var(--t-primary) !important;

  &:hover {
    color: var(--t-text-white) !important;
    background: var(--t-primary, #ffffff) !important;
    border-color: var(--t-primary, #ffffff) !important;
  }
}

.cls-secondary-btn-inverted {
  @extend .cls-btn-styles;
  color: var(--t-primary) !important;
  background: var(--t-transparent, transparent) !important;
  border: 1px solid var(--t-primary) !important;

  &:hover {
    color: var(--t-text-white) !important;
    background: var(--t-primary, #ffffff) !important;
    border-color: var(--t-primary, #ffffff) !important;
  }
}

// Reaccommodate table status colors
.cls-change {
  color: #227ea9;
}

.cls-abort {
  color: #f68643;
}

.cls-notification {
  color: #9757fe;
}

.cls-awaiting {
  color: #f8cb44;
}

.cls-reaccommodate {
  color: #35b057;
}

.cls-cancelled {
  color: #ff5555;
}

.cls-dark-grey {
  color: var(--t-grey-dark);
}

.cls-grey {
  color: var(--t-text-grey-lighter);
}

.cls-grey-lite {
  color: var(--t-text-grey-light);
}

// Table dropdown button bg and text color
.ant-dropdown {
  .ant-table-filter-dropdown {
    button {
      color: var(--t-text-white);
      font-size: 12px;
    }
  }
}

.ant-radio-button-label {
  .cls-list-count {
    padding-inline-start: 3px;
  }
}

.ant-picker {
  &.ant-picker-middle {
    width: 157px;
    padding-right: 7px;
  }
  &:hover {
    .ant-picker-clear {
      vertical-align: 0px;
      path {
        fill: var(--ant-color-error);
      }
    }
    .ant-picker-input {
      .ant-picker-suffix {
        opacity: 1;
      }
    }
  }
}

.ant-btn-primary:not(.cls-primary-btn) {
  border: 1px solid var(--t-primary) !important;
  &:hover {
    color: var(--t-primary) !important;
  }
}

.responsive {
  display: none;
  width: 50%;
}

.cls-breadcrumbSeparator {
  &::before {
    color: var(--t-text-grey-lighter);
    transform: rotate(-90deg);
    display: inline-block;
    font-size: 9px;
    font-weight: bold;
    margin-block-start: 0;
  }
}

@media (min-width: 320px) and (max-width: 576px) {
  .ant-picker-dropdown {
    position: fixed;
    width: 100%;
    &::before {
      content: "";
      width: 100%;
      height: 100%;
      display: block;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      background-color: var(--ant-color-bg-mask);
    }
    .ant-picker-panel-container {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      border-radius: 10px 10px 0 0;
      .ant-picker-panel-layout {
        justify-content: center;
        .ant-picker-date-panel {
          width: 100%;
        }
      }
    }
  }
}

@media (min-width: 320px) and (max-width: 991px) {
  .res-only {
    display: inline-block;
  }
  .hide-res-only {
    display: none;
  }
}
